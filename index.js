const TelegramApi = require('node-telegram-bot-api')
const { gameOptions, againOptions } = require('./options')
const axios = require('axios');
const sequelize = require('./db');
const UserModel = require('./models')
const token = '8141777064:AAEDCEeg4j-fX_nkk5osPZ59Ptm9HeP0qNQ'
const bot = new TelegramApi(token, { polling: true })
const API_URL = 'https://cbu.uz/ru/arkhiv-kursov-valyut/json/';

const tomorrowApiKey = 'DZGXSbC9zCwzoNn6quBk7wAO4x4nXVFC';

const chats = {}

const getSelectedCurrencyRates = async (chatId, username) => {
    try {
        const response = await axios.get(API_URL);
        const rates = response.data;
        const selectedCurrencies = ['USD', 'EUR', 'RUB', 'CAD', 'GBP', 'TRY', 'JPY', 'AED', 'KZT'];
        const filteredRates = rates.filter(rate => selectedCurrencies.includes(rate.Ccy));

        if (filteredRates.length > 0) {
            let message = `üí± –ö—É—Ä—Å—ã –Ω—É–∂–Ω—ã—Ö –≤–∞–º –≤–∞–ª—é—Ç —É–≤–∞–∂–∞–µ–º—ã–π @${username}\n\n`;
            filteredRates.forEach(rate => {
                message += `1 ${rate.Ccy} = ${rate.Rate} UZS\n`;
            });
            bot.sendMessage(chatId, message);
        } else {
            bot.sendMessage(chatId, '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        }
    } catch (error) {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
};
const formatDate = (unixTimestamp) => {
    const date = new Date(unixTimestamp * 1000);
    const options = {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZoneName: 'short',
    };
    return date.toLocaleString('ru-RU', options);
};
const startGame = async (chatId) => {
    await bot.sendMessage(chatId, '–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å')
    const randomNumber = Math.floor(Math.random() * 10)
    chats[chatId] = randomNumber;
    await bot.sendMessage(chatId, '–û—Ç–≥–∞–¥—ã–≤–∞–π ü•π', gameOptions)

    setTimeout(() => {
        if (chats[chatId]) {
            delete chats[chatId];
            console.log(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞ ${chatId} —É–¥–∞–ª–µ–Ω—ã –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.`);
        }
    }, 5 * 60 * 1000);
}
const getWeather = async (latitude, longitude) => {
    const apiUrl = 'https://api.tomorrow.io/v4/weather/forecast';
    let result = '';
    try {
        const response = await axios.get(apiUrl, {
            params: {
                location: `${latitude},${longitude}`,
                apikey: tomorrowApiKey,
                timesteps: '1d',
                units: 'metric',
            },
        });

        const forecast = response.data.timelines.daily[0];
        const temp = forecast.values.temperatureAvg || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

        result = `–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C`;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Tomorrow.io:', error.response?.data || error.message);
        result = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
    return result;
};
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    if (msg.location) {
        const { latitude, longitude } = msg.location;

        const weather = await getWeather(latitude, longitude);
        bot.sendMessage(chatId, weather);
    } 
    // else if (!msg.text.startsWith('/')) {
    //     const input = msg.text.trim();
    //     if (/^-?\d+(\.\d+)?,-?\d+(\.\d+)?$/.test(input)) {
    //         const [latitude, longitude] = input.split(',').map(Number);
    //         const weather = await getWeather(latitude, longitude);
    //         bot.sendMessage(chatId, weather);
    //     } 
    //     else {
    //         bot.sendMessage(
    //             chatId,
    //             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 42.3478,-71.0466).'
    //         );
    //     }
    // }
});
const start = async () => {
    try {
        await sequelize.authenticate()
        await sequelize.sync()
    } catch (e) {
        console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ —Å–ª–æ–º–∞–ª–æ—Å—å");
    }
    bot.setMyCommands([
        { command: '/start', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
        { command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' },
        { command: '/game', description: '–£–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É' },
        { command: '/exchange', description: '–ö—É—Ä—Å –¥–µ–Ω–µ–≥' },
        { command: '/weather', description: '–ü–æ–≥–æ–¥–∞' }
    ])
    bot.on('message', async msg => {
        console.log(msg)
        const text = msg.text;
        const chatId = msg.chat.id;
        const messageId = msg.message_id;
        const isBot = msg.from.is_bot;
        const username = msg.from.username || msg.from.first_name;
        const isPremium = msg.from.is_premium || false;
        const requestDate = formatDate(msg.date);
        const locations = msg.location;
        try {
            if (locations) {
                const { latitude, longitude } = locations;
                const location = `${latitude},${longitude}`;

                await UserModel.upsert({
                    user_id: msg.from.id,
                    username: msg.from.username || null,
                    first_name: msg.from.first_name || null,
                    last_name: msg.from.last_name || null,
                    language_code: msg.from.language_code || null,
                    chat_id: chatId,
                    is_premium: isPremium,
                    message_id: messageId,
                    request_date: requestDate,
                    text: text || null,
                    location: location,
                    is_bot: isBot,
                });
            } else {
                await UserModel.upsert({
                    user_id: msg.from.id,
                    username: msg.from.username || null,
                    first_name: msg.from.first_name || null,
                    last_name: msg.from.last_name || null,
                    language_code: msg.from.language_code || null,
                    chat_id: chatId,
                    is_premium: isPremium,
                    message_id: messageId,
                    request_date: requestDate,
                    text: text || null,
                    is_bot: isBot,
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        }
        const formattedDate = formatDate(msg.date);
        console.log(`–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${msg.from.first_name} (@${msg.from.username})`);
        console.log(`–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${formattedDate}`);
        const mainMenu = {
            reply_markup: {
                keyboard: [
                        ['–£–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É üé≤', '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üí∏'],
                        ['–ü–æ–≥–æ–¥–∞ ‚õÖÔ∏è']
                ],
                resize_keyboard: true,
                one_time_keyboard: false 
            }
        };
        if (text === '/start') {
            await bot.sendSticker(chatId, `https://t.me/sssassssssasas/1429`)
            return bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç ü´†`, mainMenu)
        }
        if (text === '/info') {
            if (msg.from.username) {
                await bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name}`);
                await bot.sendMessage(chatId, `–ù–∏–∫–Ω–µ–π–º: @${msg.from.username}`);
            } else {
                await bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name}`);
                return bot.sendMessage(chatId, '–£ —Ç–µ–±—è –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç.');
            }
        }
        if (text === '/game') {
            return startGame(chatId);
        }
        if (text === '/exchange') {
            return getSelectedCurrencyRates(chatId, username);
        }
        if (text === '/weather') {
            return bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É');
        }
        if (text === '–£–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É üé≤') {
            return startGame(chatId);
        }
        if (text === '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üí∏') {
            return getSelectedCurrencyRates(chatId, username);
        }
        if (text === '–ü–æ–≥–æ–¥–∞ ‚õÖÔ∏è') {
            return bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É');
        }
    })
    // bot.on('callback_query', async msg => {
    //     const data = msg.data;
    //     const chatId = msg.message.chat.id;
    //     if (data === '/again') {
    //         return startGame(chatId);
    //     }
    //     if (data == chats[chatId]) {
    //         await bot.sendSticker(chatId, `https://t.me/sssassssssasas/1430`)
    //         await bot.sendMessage(chatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions)
    //     } else {
    //         await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª, –±–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions)
    //     }
    //     delete chats[chatId];
    // })
    // bot.on('callback_query', async callbackQuery => {
    //     const { data, message } = callbackQuery;
    //     const chatId = message.chat.id;
    
    //     // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–æ–∫
    //     if (data === '/info') {
    //         if (message.from.username) {
    //             await bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${message.from.first_name}`);
    //             await bot.sendMessage(chatId, `–ù–∏–∫–Ω–µ–π–º: @${message.from.username}`);
    //         } else {
    //             await bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${message.from.first_name}`);
    //             return bot.sendMessage(chatId, '–£ —Ç–µ–±—è –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç.');
    //         }
    //     }
    
    //     if (data === '/game') {
    //         return startGame(chatId);
    //     }
    
    //     if (data === '/exchange') {
    //         return getSelectedCurrencyRates(chatId, message.from.username);
    //     }
    
    //     if (data === '/weather') {
    //         return bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É');
    //     }
    
    //     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–≥—Ä—É (—É–≥–∞–¥–∞–ª –∏–ª–∏ –Ω–µ —É–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É)
    //     if (data === '/again') {
    //         return startGame(chatId);
    //     }
    
    //     if (data == chats[chatId]) {
    //         await bot.sendSticker(chatId, `https://t.me/sssassssssasas/1430`);
    //         await bot.sendMessage(chatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions);
    //     } else {
    //         await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª. –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions);
    //     }
    
    //     delete chats[chatId]; // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    // });
    bot.on('callback_query', async callbackQuery => {
        const { data, message } = callbackQuery;
        const chatId = message.chat.id;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫

        if (data === '/game') {
            return startGame(chatId);
        }

        if (data === '/exchange') {
            return getSelectedCurrencyRates(chatId, message.from.username);
        }

        if (data === '/weather') {
            return bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É');
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–≥—Ä—É
        if (data === '/again') {
            return startGame(chatId);
        }

        if (data == chats[chatId]) {
            await bot.sendSticker(chatId, `https://t.me/sssassssssasas/1430`);
            await bot.sendMessage(chatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions);
        } else {
            await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª. –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions);
        }

        delete chats[chatId]; // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    });
}
start()

