const TelegramApi = require('node-telegram-bot-api')
const { gameOptions, againOptions } = require('./options')
const axios = require('axios');
const token = '8141777064:AAEDCEeg4j-fX_nkk5osPZ59Ptm9HeP0qNQ'

const bot = new TelegramApi(token, { polling: true })
const API_URL = 'https://cbu.uz/ru/arkhiv-kursov-valyut/json/';

const tomorrowApiKey = 'DZGXSbC9zCwzoNn6quBk7wAO4x4nXVFC';


const chats = {}
// const getUsdRate = async (chatId) => {
//     try {
//         const response = await axios.get(API_URL);
//         const rates = response.data;

//         const usdRate = rates.find(rate => rate.Ccy === 'USD');
//         if (usdRate) {
//               bot.sendMessage(chatId,`1 USD = ${usdRate.Rate} UZS so'm`);
//         } else {
//             console.log('–ö—É—Ä—Å USD –Ω–µ –Ω–∞–π–¥–µ–Ω.');
//         }
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
//     }
// }
// const getCurrencyRate = async (chatId, currencyCode) => {
//     try {
//         const response = await axios.get(API_URL);
//         const rates = response.data;

//         // –ò—â–µ–º –∫—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
//         const currencyRate = rates.find(rate => rate.Ccy === currencyCode.toUpperCase());
//         if (currencyRate) {
//             bot.sendMessage(chatId, `1 ${currencyRate.Ccy} = ${currencyRate.Rate} UZS so'm`);
//         } else {
//             bot.sendMessage(chatId, `–ö—É—Ä—Å –¥–ª—è ${currencyCode} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
//         }
//     } catch (error) {
//         bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
//     }
// };
// const getAllCurrencyRates = async (chatId) => {
//     try {
//         const response = await axios.get(API_URL);
//         const rates = response.data;

//         if (rates && rates.length > 0) {
//             let message = "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n";
//             rates.forEach(rate => {
//                 message += `1 ${rate.Ccy} = ${rate.Rate} UZS\n`;
//             });
//             bot.sendMessage(chatId, message);
//         } else {
//             bot.sendMessage(chatId, '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
//         }
//     } catch (error) {
//         bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
//     }
// };
const getSelectedCurrencyRates = async (chatId, username) => {
    try {
        const response = await axios.get(API_URL);
        const rates = response.data;

        // –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        const selectedCurrencies = ['USD', 'EUR', 'RUB', 'CAD', 'GBP', 'TRY', 'JPY', 'AED', 'KZT'];

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞–ª—é—Ç–∞–º
        const filteredRates = rates.filter(rate => selectedCurrencies.includes(rate.Ccy));

        if (filteredRates.length > 0) {
            let message = `üí± –ö—É—Ä—Å—ã –Ω—É–∂–Ω—ã—Ö –≤–∞–º –≤–∞–ª—é—Ç —É–≤–∞–∂–∞–µ–º—ã–π @${username}\n\n`;
            filteredRates.forEach(rate => {
                message += `1 ${rate.Ccy} = ${rate.Rate} UZS\n`;
            });
            bot.sendMessage(chatId, message);
        } else {
            bot.sendMessage(chatId, '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        }
    } catch (error) {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
};
const formatDate = (unixTimestamp) => {
    const date = new Date(unixTimestamp * 1000); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    const options = {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZoneName: 'short',
    };
    return date.toLocaleString('ru-RU', options); // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
};


const startGame = async (chatId) => {
    await bot.sendMessage(chatId, '–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å')
    const randomNumber = Math.floor(Math.random() * 10)
    chats[chatId] = randomNumber;
    await bot.sendMessage(chatId, '–û—Ç–≥–∞–¥—ã–≤–∞–π ü•π', gameOptions)
}
const getWeather = async (latitude, longitude) => {
    const apiUrl = 'https://api.tomorrow.io/v4/weather/forecast';

    try {
        const response = await axios.get(apiUrl, {
            params: {
                location: `${latitude},${longitude}`,
                apikey: tomorrowApiKey,
                timesteps: '1d', // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å
                units: 'metric', // –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –¶–µ–ª—å—Å–∏—è—Ö
            },
        });

        const forecast = response.data.timelines.daily[0]; // –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑
        const temp = forecast.values.temperatureAvg || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

        return `–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C`;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Tomorrow.io:', error.response?.data || error.message);
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weather
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    if (msg.location) {
        const { latitude, longitude } = msg.location;

        const weather = await getWeather(latitude, longitude);
        bot.sendMessage(chatId, weather);
    } else if (!msg.text.startsWith('/')) {
        const input = msg.text.trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
        if (/^-?\d+(\.\d+)?,-?\d+(\.\d+)?$/.test(input)) {
            const [latitude, longitude] = input.split(',').map(Number);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            const weather = await getWeather(latitude, longitude);
            bot.sendMessage(chatId, weather);
        } else {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            bot.sendMessage(
                chatId,
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 42.3478,-71.0466).'
            );
        }
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
const start = () => {

    bot.setMyCommands([
        { command: '/start', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
        { command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' },
        { command: '/game', description: '–£–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É' },
        { command: '/exchange', description: '–ö—É—Ä—Å –¥–µ–Ω–µ–≥' },
        { command: '/weather', description: '–ü–æ–≥–æ–¥–∞' }
    ])

    bot.on('message', async msg => {
        console.log(msg)
        const text = msg.text;
        const chatId = msg.chat.id;
        const username = msg.from.username || msg.from.first_name;
        const formattedDate = formatDate(msg.date);

        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(`–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${msg.from.first_name} (@${msg.from.username})`);
        console.log(`–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${formattedDate}`);
        if (text === '/start') {
            await bot.sendSticker(chatId, `https://t.me/sssassssssasas/1429`)
            return bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç`)
        }
        if (text === '/info') {
            if (msg.from.username) {
                await bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name}`);
                return bot.sendMessage(chatId, `–ù–∏–∫–Ω–µ–π–º: @${msg.from.username}`)
            } else {
                await bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name}`);
                return bot.sendMessage(chatId, '–£ —Ç–µ–±—è –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç.');
            }
        }
        if (text === '/game') {
            return startGame(chatId);
        }
        if (text === '/exchange') {
            return getSelectedCurrencyRates(chatId, username);
        }
        if (text === '/weather') {
            return bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É');
            //await bot.sendMessage(chatId, '–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –®–∏—Ä–æ—Ç—É –∏ –î–æ–ª–≥–æ—Ç—É –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤! ');
            //await bot.sendMessage(chatId, '42.3478,-71.0466');
        }
    })

    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;
        if (data === '/again') {
            return startGame(chatId);
        }
        if (data == chats[chatId]) {
            await bot.sendSticker(chatId, `https://t.me/sssassssssasas/1430`)
            return bot.sendMessage(chatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions)
        } else {
            return bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª, –±–æ—Ç –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions)
        }
    })

}
start()

